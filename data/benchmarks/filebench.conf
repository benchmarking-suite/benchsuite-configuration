# Benchmarking Suite
# Copyright 2014-2017 Engineering Ingegneria Informatica S.p.A.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Developed in the ARTIST EU project (www.artist-project.eu) and in the
# CloudPerfect EU project (https://cloudperfect.eu/)

[DEFAULT]
name = Filebench
class = benchsuite.stdlib.benchmark.vm_benchmark.BashCommandBenchmark

install_ubuntu =
    sudo apt-get update
    sudo apt-get -y install bison make libtool automake autoconf flex
    wget -q https://github.com/filebench/filebench/archive/1.4.9.1.tar.gz
    tar xzvf 1.4.9.1.tar.gz
    mv filebench-1.4.9.1 filebench
    cd filebench
    libtoolize
    aclocal
    autoheader
    automake --add-missing
    autoconf
    ./configure
    make


install_centos =
    sudo yum -y install bison make libtool automake autoconf flex
    wget -q https://github.com/filebench/filebench/archive/1.4.9.1.tar.gz
    tar xzvf 1.4.9.1.tar.gz
    mv filebench-1.4.9.1 filebench
    cd filebench
    libtoolize
    aclocal
    autoheader
    automake --add-missing
    autoconf
    ./configure
    make


execute =
	sudo su -c 'echo "0" > /proc/sys/kernel/randomize_va_space'
	cp filebench/workloads/%(workload_file)s workload.f
	for i in $(echo "%(custom_params)s"); do sed "s/set \$$(echo "$i" | grep -o '^.*=' -).*/set \$$i/" -i workload.f; done
	echo 'run %(run_param)s' >> workload.f
	sudo filebench/filebench -f workload.f

workload_file =
custom_params =
run_param = 1



[webproxy]
workload_file = webproxy.f
# n of seconds the test will run
run_param = 60

[webserver]
workload_file = webserver.f
# n of seconds the test will run
run_param = 60




#
# NOT YET TUNED FOR PROFILING
#

[compflow_demo]
workload_file = compflow_demo.f

[copyfiles]
workload_file = copyfiles.f
#custom_params =
#    meanfilesize=1m
#    nfiles=5


[videoserver]
workload_file = videoserver.f
custom_params =
    filesize=1g
    numactivevids=10
    numpassivevids=10
run_param = 120  # run for two minutes

[createfiles]
workload_file = createfiles.f

[filemicro_create]
workload_file = filemicro_create.f

[filemicro_createfiles]
workload_file = filemicro_createfiles.f

[filemicro_createrand]
workload_file = filemicro_createrand.f

[filemicro_delete]
workload_file = filemicro_delete.f

[filemicro_rread]
workload_file = filemicro_rread.f

[filemicro_rwritedsync]
workload_file = filemicro_rwritedsync.f

[filemicro_rwrite]
workload_file = filemicro_rwrite.f

[filemicro_rwritefsync]
workload_file = filemicro_rwritefsync.f

[filemicro_seqread]
workload_file = filemicro_seqread.f

[filemicro_seqwrite]
workload_file = filemicro_seqwrite.f

[filemicro_seqwriterand]
workload_file = filemicro_seqwriterand.f

[filemicro_seqwriterandvargam]
workload_file = filemicro_seqwriterandvargam.f

[filemicro_seqwriterandvartab]
workload_file = filemicro_seqwriterandvartab.f

[filemicro_statfile]
workload_file = filemicro_statfile.f

[filemicro_writefsync]
workload_file = filemicro_writefsync.f

[fileserver]
workload_file = fileserver.f

[fivestreamreaddirect]
workload_file = fivestreamreaddirect.f

[fivestreamread]
workload_file = fivestreamread.f

[fivestreamwritedirect]
workload_file = fivestreamwritedirect.f

[fivestreamwrite]
workload_file = fivestreamwrite.f

[listdirs]
workload_file = listdirs.f

[makedirs]
workload_file = makedirs.f

[mongo]
workload_file = mongo.f

[netsfs]
workload_file = netsfs.f

[networkfs]
workload_file = networkfs.f

[oltp]
workload_file = oltp.f

[openfiles]
workload_file = openfiles.f

[randomfileaccess]
workload_file = randomfileaccess.f

[randomread]
workload_file = randomread.f

[randomrw]
workload_file = randomrw.f

[randomwrite]
workload_file = randomwrite.f

[ratelimcopyfiles]
workload_file = ratelimcopyfiles.f

[removedirs]
workload_file = removedirs.f

[singlestreamreaddirect]
workload_file = singlestreamreaddirect.f

[singlestreamread]
workload_file = singlestreamread.f

[singlestreamwritedirect]
workload_file = singlestreamwritedirect.f

[singlestreamwrite]
workload_file = singlestreamwrite.f

[tpcso]
workload_file = tpcso.f

[varmail]
workload_file = varmail.f



